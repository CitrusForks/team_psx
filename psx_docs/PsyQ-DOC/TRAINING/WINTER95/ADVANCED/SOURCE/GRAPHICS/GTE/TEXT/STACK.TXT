    スクラッチパッドをスタックに割り当てることはいくつかの条件のもとで
    可能です。以下が、スタックアドレスの変更方法と、その注意点です。

  ( スタックアドレスの変更方法について )

    以下のようなインラインマクロを使用してください。

    #define SetSpadStack(addr) {\
        __asm__ volatile ("move $8,%0"     ::"r"(addr):"$8","memory"); \
        __asm__ volatile ("sw $29,0($8)"   ::         :"$8","memory"); \
        __asm__ volatile ("addiu $8,$8,-4" ::         :"$8","memory"); \
        __asm__ volatile ("move $29,$8"    ::         :"$8","memory"); \
    }
    
    #define ResetSpadStack() {\
        __asm__ volatile ("addiu $29,$29,4":::"$29","memory"); \
        __asm__ volatile ("lw $29,0($29)"  :::"$29","memory"); \
    }

    #define GetStackAddr(addr) {\
        __asm__ volatile ("move $8,%0"     ::"r"(addr):"$8","memory"); \
        __asm__ volatile ("sw $29,0($8)"   ::         :"$8","memory"); \
    }

    ( サンプル )
    ------------------------------------------------

    static unsigned long sp;

    main()
    {
        func1();

        printf("SP:%08X\n", sp);
    }

    func1()
    {
        auto   int a1, a2;
        static int s1, s2;
    
        SetSpadStack(0x1f8003fc);
        ~~~~~~~~~~~~~~~~~~~~~~~~~
        s1 = func2();
    
        ResetSpadStack();
        ~~~~~~~~~~~~~~~~~
        return s1;
    }
    
    func2()
    {
        auto   int volatile a1, a2;
        static int volatile s1, s2;

        GetStackAddr(&sp);
        ~~~~~~~~~~~~~~~~~~
        return 0;
    }
    ------------------------------------------------

  ( スタックアドレスを変更する場合の注意点 )

   ( 1 ) スクラッチパッドのサイズについて

    スクラッチパッドのサイズは、1024 バイトで、アドレスは
  1F800000 から 1F8003FF まで割り当てられています。
  これを全てスタックとして使う場合は、1F8003FC をスタックアドレス
  とします。ただしそのうち 4バイトは、旧スタックアドレスの保存用に
  使用しますので、実際には 1F8003F8 から、1F800000 までの 1020 バイト
  をスタックに割り当てることができます。

   ( 2 ) 最適化オプションについて

    コンパイルオプションは、-O1 以上を使用してください。
  -O0 でコンパイルすると、fp レジスタを使用する場合があるため、
  ハングする恐れがあります。

   ( 3 ) 引数が 5以上の関数について

    関数の引数が 4以下の場合は、レジスタで渡されますが、5以上の場合は、
  スタックを引数のワークとして利用するので、スタックを切り替える以前の
  スタックを参照してしまうような場合、ハングする恐れがあります。
    なお、ライブラリで引数が 5以上の関数は、そのほとんどが GTE関連の関数です。
  GTE関連の関数は、DMPSXのマクロを利用することでこれを回避することができます。