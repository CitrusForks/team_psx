{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f5\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier{\*\falt Courier New};}{\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f42\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f130\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}@MS Mincho;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f337\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f338\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f340\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f341\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f342\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f343\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f344\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f345\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f347\fbidi \fswiss\fcharset238\fprq2 Arial CE;}{\f348\fbidi \fswiss\fcharset204\fprq2 Arial Cyr;}
{\f350\fbidi \fswiss\fcharset161\fprq2 Arial Greek;}{\f351\fbidi \fswiss\fcharset162\fprq2 Arial Tur;}{\f352\fbidi \fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f353\fbidi \fswiss\fcharset178\fprq2 Arial (Arabic);}
{\f354\fbidi \fswiss\fcharset186\fprq2 Arial Baltic;}{\f355\fbidi \fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f449\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f447\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f448\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f450\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f451\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f454\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f449\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f447\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f448\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f450\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f451\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f454\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f757\fbidi \fswiss\fcharset238\fprq2 Tahoma CE;}{\f758\fbidi \fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f760\fbidi \fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f761\fbidi \fswiss\fcharset162\fprq2 Tahoma Tur;}{\f762\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f763\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f764\fbidi \fswiss\fcharset186\fprq2 Tahoma Baltic;}
{\f765\fbidi \fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}{\f766\fbidi \fswiss\fcharset222\fprq2 Tahoma (Thai);}{\f1639\fbidi \fmodern\fcharset0\fprq1 @MS Mincho Western;}{\f1637\fbidi \fmodern\fcharset238\fprq1 @MS Mincho CE;}
{\f1638\fbidi \fmodern\fcharset204\fprq1 @MS Mincho Cyr;}{\f1640\fbidi \fmodern\fcharset161\fprq1 @MS Mincho Greek;}{\f1641\fbidi \fmodern\fcharset162\fprq1 @MS Mincho Tur;}{\f1644\fbidi \fmodern\fcharset186\fprq1 @MS Mincho Baltic;}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}
{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}
{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 
\ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}{\s15\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs24\alang1025 \ltrch\fcs0 \f1\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \snext15 \spriority0 Default Text;}{
\s16\ql \li0\ri0\sb240\sa120\keepn\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af42\afs28\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe255\loch\f0\hich\af0\dbch\af11\cgrid\langnp1033\langfenp255 \sbasedon15 \snext17 Heading;}{
\s17\ql \li0\ri0\sa120\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs24\alang1025 \ltrch\fcs0 \f1\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon15 \snext17 Text Body Single;}{
\s18\ql \li0\ri0\sa120\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af42\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon17 \snext18 List;}{
\s19\ql \li0\ri0\sb120\sa120\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \ai\af42\afs24\alang1025 \ltrch\fcs0 \i\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon15 \snext19 \sqformat caption;}{
\s20\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af42\afs24\alang1025 \ltrch\fcs0 \fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon15 \snext20 Index;}}{\*\rsidtbl \rsid7890070\rsid8614410}{\mmathPr\mmathFont34
\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator Arnob Mallick}{\creatim\yr2013\mo10\dy28\hr16\min58}{\revtim\yr2013\mo10\dy28\hr17}{\version2}{\edmins2}{\nofpages17}
{\nofwords5176}{\nofchars29505}{\nofcharsws34612}{\vern57435}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl720\margr720\margt720\margb720\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\pgnstart0\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120
\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale87\viewzk2\rsidroot8614410 \fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0\ltrpar \sectd \ltrsect
\sbknone\pgnrestart\pgnstarts0\linex0\sectlinegrid312\sectdefaultcl\sectrsid8614410\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar
\s15\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs24\alang1025 \ltrch\fcs0 \f1\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 {\rtlch\fcs1 \af5 \ltrch\fcs0 \f5\insrsid7890070 
--------------------------------------------------------------------------
\par System Operation
\par --------------------------------------------------------------------------
\par 
\par Introduction
\par --------------------------------------------------------------------------
\par This text covers the usage of the R3000, the system control coprocessor and
\par hardware registers, the file server and some system calls.
\par 
\par --------------------------------------------------------------------------
\par R3000
\par --------------------------------------------------------------------------
\par The heart of the psx is a MIPS R3000. The version in the PSX has two
\par coproccors, (cop0 - System Control Coproccessor, cop2 - GTE), one
\par multiplier/divider, 32 general registers, one ALU, one shifter, one
\par address adder, 4kb of Instuction Cache, 1 kb of Data cache and NO floating
\par point unit.
\par 
\par Registers
\par -------------------------------------------------------------
\par All registers are 32 bits wide.
\par 
\par  0       zero     Constant, always 0
\par  1       at       Assembler temporary.
\par  2- 3    v0-v1    Subroutine return values
\par  4- 7    a0-a3    Subroutine arguments
\par  8-15    t0-t7    Temporaries, may be changed by subroutines
\par 16-23    s0-s7    Register variables, must be saved by subs.
\par 24-25    t8-t9    Temporaries, may be changed by subroutines
\par 26-27    k0-k1    Reserved for the kernel
\par 28       gp       Global pointer
\par 29       sp       Stack pointer
\par 30       fp(s8)   9th register variable, subs can use this as a frame
\par                   pointer
\par 31       ra       Return address
\par 
\par  -       pc       Program counter
\par  -       hi,lo    Registers of the multiplier/divider.
\par 
\par All registers behave the same, remarks are not hardware bound, but general
\par programming good practice. Respect these for compatability, especially if
\par you intend to use kernel routines.
\par Exceptions are register 0, and 31. Zero will always return 0, regardless
\par of any writing attempts. Ra is used by the normal jal instruction for the
\par return address. (points to the second instruction after the jal). Note that
\par the jalr instruction can use any register for the return address, though
\par usually only register 31 is used.
\par 
\par The PC is not really a register, and should not be seen like one. Hi, Lo
\par are the registers which the multiplier/divider returns its results to.
\par Special instructions are implemented to deal with them.
\par 
\par -------------------------------------------------------------
\par Instructions
\par -------------------------------------------------------------
\par rt       target register (cpu general register 0-31)
\par rs       source register (cpu general register 0-31)
\par rd       destination register (cpu general register 0-31)
\par base     base register (cpu general register 0-31)
\par imm      16 bit immediate
\par b?       immediate value of ? bits wide.
\par c0r      Coprocessor 0 register
\par c2d      Coprocessor 2 (GTE) data register
\par c2c      Coprocessor 2 (GTE) control register
\par 
\par 
\par imm(base) means an address of the value in the register + the immediate
\par          value.
\par 
\par inst     instruction name.
\par d        number of instructions to wait before using r1 (target reg).
\par args     format of the operand fields.
\par desc.    description of the instruction.
\par 
\par 
\par inst  d  args        desc.
\par 
\par *Load/Store instructions
\par 
\par lb    1  rt,imm(base)  loads lowest byte of rt with addressed byte and
\par                        extends sign.
\par lbu   1  rt,imm(base)  loads lowest byte of rt with addressed byte.
\par lh    1  rt,imm(base)  loads lowest halfword of rt with addressed halfword
\par                         and extends sign.
\par lhu   1  rt,imm(base)  loads lowest halfword of rt with addressed halfword.
\par lw    1  rt,imm(base)  loads r1 with addressed word.
\par lwl   0  rt,imm(base)  loads high order byte of rt with addressed byte and
\par                        then loads up to the low order word boundary into rt.
\par lwr   0  rt,imm(base)  loads low order byte of rt with addressed byte and
\par                        then loads up to the high order word boundary into
\par                        rt.
\par 
\par                        There's no delay for lwl and lwr, so you can use them
\par                        directly following eachother. fe. to load a word
\par                        anywhere in memory without regard to alignment:
\par                        lwl   a0,$0003(t0)
\par                        lwr   a0,$0000(t0)
\par 
\par sb    1  rt,imm(base)  stores lowest byte of rt in addressed byte.
\par sh    1  rt,imm(base)  stores lowest halfword of rt in addressed halfword.
\par sw    1  rt,imm(base)  stores rt in addressed word.
\par swl   0  rt,imm(base)  unaligned store, see lwl
\par swr   0  rt,imm(base)  unaligned store, see lwr
\par 
\par lui   0  rt,imm        loads rt with immediate<<$10
\par 
\par *arithmic instructions
\par 
\par When an arithmic overflow occurs, rd will not be modified.
\par 
\par add   0  rd,rs,rt      Adds rt to rs and stores the result in rd.
\par addu  0  rd,rs,rt      Adds rt to rs, ignores arithmic overflow and stores
\par                        result in rd.
\par sub   0  rd,rs,rt      Substracts rt from rs and stores result in rd.
\par subu  0  rd,rs,rt      Substracts rt from rs, ignores arithmic overflow and
\par                        stores result in rd.
\par 
\par addi  0  rd,rs,imm     Adds signextended immediate to rs, and stores the
\par                        result in rd.
\par addiu 0  rd,rs,imm     Adds signextended immediate to rs, ignores arithmic
\par                        overflow and stores the result in rd.
\par 
\par subi  0  rd,rs,imm     Substracts signextended immediate from rs and stores
\par                        the result in rd.
\par subiu 0  rd,rs,imm     Substracts signextended immediate from rs, ignores
\par                        arithmic overflow, and stores the result in rd.
\par 
\par mult     rs,rt         Multiplies rs with rt, and stores the 64 bit sign
\par                        extended result in hi/lo.
\par multu    rs,rt         Multiplies rs with rt, and stores the 64 bit result
\par                        in hi/lo.
\par div      rs,rt         Divides rs by rt, and stores the quotient into lo,
\par                        and the remainder into high. Results are sign
\par                        extended.
\par divu     rs,rt         Divides rs by rt, and stores the quotient into lo,
\par                        and the remainder into high.
\par 
\par 
\par *logical instructions
\par 
\par and   0  rd,rs,rt      Performs a bit wise AND between rs and rt, and
\par                        stores the result in rd.
\par or    0  rd,rs,rt      Performs a bit wise OR between rs and rt, and
\par                        stores the result in rd.
\par xor   0  rd,rs,rt      Performs a bit wise XOR between rs and rt, and
\par                        stores the result in rd.
\par nor   0  rd,rs,rt      Performs a bit wise NOR between rs and rt, and
\par                        stores the result in rd.
\par 
\par andi  0  rd,rs,imm     Performs a bit wise AND between rs and unsigned
\par                        immediate and stores the result in rd.
\par ori   0  rd,rs,imm     Performs a bit wise OR between rs and unsigned
\par                        immediate and stores the result in rd.
\par xori  0  rd,rs,imm     Performs a bit wise XOR between rs and unsigned
\par                        immediate and stores the result in rd.
\par 
\par *shifting instructions
\par 
\par sllv  0  rd,rs,rt      Shifts rs rt bits to the left and stores the result
\par                        in rd.
\par srlv  0  rd,rs,rt      Shifts rs rt bits to the right and stores the result
\par                        in rd.
\par srav  0  rd,rs,rt      Shifts the value in rs rt bits to the right,
\par                        preserving sign, and stores the value in rd.
\par 
\par 
\par sll   0  rd,rs,b5      Shifts rs b5 bits to the left and stores the result
\par                        in rd.
\par srl   0  rd,rs,b5      Shifts rs b5 bits to the right and stores the result
\par                        in rd.
\par sra   0  rd,rs,b5      Shifts rs b5 bits to the right, preserving sign and
\par                        stores the result in rd.
\par 
\par *comparison instructions.
\par 
\par slt   0  rd,rs,rt      rd=1 if rs < rt, else rd = 0
\par sltu  0  rd,rs,rt      rd=1 if (unsigned)rs <(unsigned)rt, else rd = 0
\par 
\par slti  0  rd,rs,imm     rd=1 if rs < imm, else rd = 0
\par sltiu 0  rd,rs,imm     rd=1 if (unsigned)rs < (unsigned)imm, else rd = 0
\par 
\par *jumps and branches
\par 
\par Note the the instruction following the branch will always be executed.
\par 
\par j        target        jumps to target
\par jal      target        jumps to target and stores pc+8 into RA (second
\par                        instruction after the jal instruction)
\par 
\par jr       rd            jumps to address in rd
\par jalr     (rt,) rd      jumps to address in rd and stores pc+8 into RA, or
\par                        in rt.
\par 
\par beq      rs,rt,imm     branches to imm if rs == rt
\par bne      rs,rt,imm     branches to imm if rs != rt
\par 
\par bgtz     rs,imm        branches to imm if rs > 0
\par bltz     rs,imm        branches to imm if rs < 0
\par blez     rs,imm        branches to imm if rs <= 0
\par bgez     rs,imm        branches to imm if rs >= 0
\par bltzal   rs,imm        branches to imm and stores pc+8 into RA if rs < 0
\par bgezal   rs,imm        branches to imm rd and stores pc+8 into RA if rs >= 0
\par 
\par *system instructions
\par 
\par mfhi   2 rd            moves HI into rd
\par mflo   2 rd            moves LO into rd
\par mthi   2 rs            moves rs into HI
\par mtlo   2 rs            moves rs into LO
\par 
\par mtc0   2 rs,c0r        moves rs into cop0 register c0r
\par mfc0   2 rd,c0r        moves cop0 register c0r into rd
\par 
\par mtc2   2 rs,c2d        moves rs into cop2 data register c2d
\par mfc2   2 rd,c2d        moves cop2 data register c2d into rd
\par 
\par ctc2   2 rs,c2c        moves rs into cop2 control register c2d
\par cfc2   2 rd,c2c        moves cop2 control register c2d into rd
\par 
\par lwc2   1 c2d,imm(base) load cop2 data register with addressed word
\par swc2   1 c2d,imm(base) stores cop2 data register at addressed word
\par 
\par syscall  (b20)         generates a system call exception
\par break    (b20)         generates a breakpoint exception
\par                        the 20bits wide code field is not passed, but
\par                        must be read from the instuction itself if you
\par                        want to use it.
\par 
\par cop2     b25           Coprocessor operation is started. b25 is
\par                        passed as parameter.
\par 
\par rfe                    restores the interrupt enable and kernel
\par                        previlege bits.
\par 
\par tlb instructions       see MIPS doc.
\par 
\par --------------------------------------------------------------------------
\par Cop0 - System control coprocessor
\par --------------------------------------------------------------------------
\par 
\par Registers:
\par #    Name      rw Desciption.
\par 
\par -------------------------------------------------------------
\par 16   ERREG
\par -------------------------------------------------------------
\par 15   PRid      r  COP0 type and rev level
\par bit |31                  16|15         8|7           0|
\par desc|                      |Imp         |Rev          |
\par 
\par Imp      3        CP0 type R3000A
\par          7        IDT unique (3041) use REV to determine correct
\par                   config.
\par Rev               Revision level.
\par -------------------------------------------------------------
\par 14   EPC       r  Return address from trap
\par 
\par Contains the return address after an exception. This address is
\par the instruction at which the exception took place, unless BD is
\par set in CAUSE, when the instruction is EPC+4.
\par -------------------------------------------------------------
\par 13   CAUSE     r  Describes the most recently recognised exception
\par bit |31|30|29 28|27 26 25 24 23 22 21 20 19 18 17 16|
\par desc|BD| 0|CE   |                                  0|
\par bit |15 14 13 12 11 10 09 08|07|06 05 04 03 02|01 00|
\par desc|Ip                     | 0|Excode        |    0|
\par 
\par BD                Is set when last exception points to the
\par                   branch instuction instead of the instruction
\par                   in the branch delay slot, where the exception
\par                   occurred.
\par CE                Contains the coprocessor number if the exception
\par                   occurred because of a coprocessor instuction for
\par                   a coprocessor which wasn't enabled in SR.
\par Ip                Interrupt pending field. Bit 8 and 9 are RW, and
\par                   contain the last value written to them. As long
\par                   as any of the bits are set they will cause an
\par                   interrupt if the corresponding bit is set in IM.
\par Excode            Describes what kind of exception occured:
\par 0        INT      Interrupt
\par 1        MOD      Tlb modification
\par 2        TLBL     Tlb load
\par 3        TLBS     Tlb store
\par 4        AdEL     Address error, load/I-fetch
\par 5        AdES     Address error, store
\par                   The address errors occur when attempting to read
\par                   outside of KUseg in user mode and when the address
\par                   is misaligned.
\par 6        IBE      Bus error on Instruction fetch.
\par 7        DBE      Bus error on Data load.
\par 8        Syscall  Generated unconditionally by at syscall instruction
\par 9        BP       Breakpoint - break instruction.
\par 10       RI       Reserved instruction
\par 11       CpU      Coprocessor unusable
\par 12       Ov       Arithmic overflow
\par -------------------------------------------------------------
\par 12   SR        rw System status register
\par bit |31 |30 |29 |28 |27 26|25|24 23|22 |21|20|19|18|17 |16 |
\par desc|CU3|CU2|CU1|CU0|    0|RE|    0|BEV|TS|PE|CM|PZ|SwC|IsC|
\par 
\par bit |15 14 13 12 11 10 09 08|07 06|05 |04 |03 |02 |01 |00 |
\par desc|Im                     |    0|KUo|IEo|KUp|IEp|KUc|IEc|
\par 
\par CUx      0        Coprocessor x disabled
\par          1        Coprocessor x enabled
\par                   CU2 is for the GTE, CU1 is for the FPA, which is
\par                   not available in the PSX.
\par CU0      0        Cop0 in kernal mode.
\par          1        Cop0 in user mode.
\par                   Makes some nominally privileged instruction usable
\par                   in user mode. Normal instructions are usable regardless
\par                   of this bit's setting.
\par RE       0        Normal 'endianness'
\par          1        Reverse 'endianness'
\par                   Reverses the byte order in which data is stored in
\par                   memory. (lo-hi -> hi-lo)
\par BEV      0        Boot exception vectors in RAM
\par          1        Boot exception vectors in ROM (kseg1)
\par TS                TLB shutdown. Gets set if a programm address simultaniously
\par                   matches 2 TLB entries.
\par PE                Cache parity error. Does not cause exception.
\par CM                Shows the result of the last load operation with the D-cache
\par                   isolated. It gets set if the cache really contained data
\par                   for the addressed memory location.
\par PZ                When set cache parity bits are written as 0.
\par Isc      0        Do not isolate cache.
\par          1        Isolate cache. All load and store operations are targetted
\par                   to the Data cache, and never the main memory.
\par Swc      0        Normal cache mode.
\par          1        Swapped cache mode. I cache will act as D cache and vice
\par                   versa. Use only with Isc to access & invalidate i cache
\par                   entries
\par Im                8 bit interrupt mask fields. When set the corresponding
\par                   interrupts are allowed to cause an exception.
\par KUc      0        User mode privilege     , rfe pops KUp here
\par          1        Kernal mode privilege   
\par IEc      0        Interrupts enabled      , rfe pops IUp here
\par          1        All interrupts disabled.
\par KUp               KUc gets pushed here on an exception, rfe pops KUo here
\par IUp               IUc gets pushed here on an exception, rfe pops IUo here
\par KUo               KUp gets pushed here on an exception
\par IUo               IUp gets pushed here on an exception
\par -------------------------------------------------------------
\par 11   BPCM      rw Execute breakpoint mask.
\par 
\par Program counter is ANDed with this value and then compared to
\par the value in BPC.
\par -------------------------------------------------------------
\par 10   TLBHI/PID
\par -------------------------------------------------------------
\par 9    BDAM      rw Data Access breakpoint mask.
\par 
\par Data fetch address is ANDed with this value and then compared
\par to the value in BDA
\par -------------------------------------------------------------
\par 8    BadVaddr  r  Bad Virtual Address.
\par 
\par Contains the address whose reference caused an exception. Set
\par on any MMU type of exceptions, on references outside of kuseg
\par and on any misaligned reference.
\par -------------------------------------------------------------
\par 7    DCIC      rw Breakpoint control
\par |1f 1e 1d 1c|1b|1a|19|18|17|16 15 14 13 12 11 10||0f      00|
\par | 1  1  1  0| W| R|DA|PC| 1|                   0|          0|
\par 
\par W        0
\par          1        Break on Write
\par R        0
\par          1        Break on Read
\par DA       0        Data access breakpoint disabled
\par          1        Data access breakpoint enabled
\par PC       0        Execution breakpoint disabled
\par          1        Execution breakpoint enabled
\par 
\par To use the Execution breakpoint, set PC. To use the Data access
\par breakpoint set DA and either R, W or both. Both breakpoints
\par can be used simultaniously. When a breakpoint occurs the PSX
\par jumps to $00000040.
\par -------------------------------------------------------------
\par 6    PIDMASK
\par -------------------------------------------------------------
\par 5    BDA       rw Breakpoint on data access.
\par 
\par Sets the breakpoint address for load/store operations
\par -------------------------------------------------------------
\par 4    CTXT
\par -------------------------------------------------------------
\par 3    BPC       rw Breakpoint on execute.
\par 
\par Sets the breakpoint address to break on on execute.
\par -------------------------------------------------------------
\par 2    TLBLO
\par 1    RAND
\par 0    INX
\par 
\par For TLB details see mips doc.
\par 
\par --------------------------------------------------------------------------
\par PC file server
\par --------------------------------------------------------------------------
\par Caetla supports pcdrv: device, the SN systems device extension to access
\par files on the drive of the pc. This fileserver can be accessed by using the
\par kernel functions, with the 'pcdrv:' device name prefix to the filenames or
\par using the SN system calls.
\par 
\par -------------------------------------------------------------
\par SN System calls
\par -------------------------------------------------------------
\par The following SN system calls for the fileserver are provided.
\par Accessed by setting the registers and using the break command
\par with the specified field.
\par -------------------------------------------------------------
\par PCInit   Inits the fileserver.
\par break    $0101
\par -------------------------------------------------------------
\par PCCreat  Creates a new file on PC.
\par break    $0102
\par in:      a1       pointer to file name
\par          a2       file attribute
\par out:     v0       0 = success, -1 = failure
\par          v1       file handle or error code if v0 is negative
\par -------------------------------------------------------------
\par PCOpen            Opens a file on the PC.
\par break    $0103
\par in:      a1       pointer to file name
\par          a2       access mode 0     read only
\par                               1     write only
\par                               2     r/w
\par out:     v0       0 = succes, -1 = failure
\par          v1       file handle or error code if v0 is negative
\par -------------------------------------------------------------
\par PCClose           Closes a file on the PC.
\par break    $0104
\par in:      a1       file handle
\par out:     v0       0 = succes, -1 = failure
\par          v1       0 = succes, error code if v0 is negative
\par -------------------------------------------------------------
\par PCRead            Reads from an open file on PC.
\par break    $0105
\par in:      a1       file handle
\par          a2       length in bytes
\par          a3       pointer to store address
\par out:     v0       0 = succes, -1 = failure
\par          v1       number of read bytes or error code if v0 is
\par                   negative.
\par 
\par Note:    Does not stop at eof, so if you set more bytes to read
\par          than the filelength, the fileserver will pad with zero
\par          bytes. If you are not sure of the the filelength obtain
\par          the filelength by PClSeek (a2 = 0, a3 = 2, v1 will return
\par          the length of the file, don't forget to reset the file
\par          pointer to the start before calling PCread!)
\par -------------------------------------------------------------
\par PCWrite           Writes to an open file on PC.
\par break    $0106
\par in:      a1       file handle
\par          a2       length in bytes
\par          a3       pointer to read address
\par out:     v0       0 = succes, -1 = failure
\par          v1       number of written bytes or error code if v0
\par                   is negative.
\par -------------------------------------------------------------
\par PClSeek           Repositions the file pointer
\par break    $0107
\par in:      a1       file handle
\par          a2       number of bytes to move.
\par          a3       position from 0   Beginning of file
\par                                 1   Current pointer
\par                                 2   End of file
\par out:     v0       0 = succes, -1 = failure
\par          v1       file pointer
\par -------------------------------------------------------------
\par Attributes are passed as is. File attributes for the pc file
\par system are like this:
\par bit | 7  6| 5| 4| 3| 2| 1| 0|
\par desc|    0| A| D| 0| S| H| R|
\par 
\par A        Archive file
\par D        Directory
\par S        System file
\par H        Hidden file
\par R        Read only file
\par -------------------------------------------------------------
\par 
\par 
\par --------------------------------------------------------------------------
\par System calls
\par --------------------------------------------------------------------------
\par Kernel system calls are accessed by loading the call number in t1, and
\par jumping to the specifeed address.
\par A0 call $3f means: load t1 with $3f and jump to $000000a0.
\par 
\par -------------------------------------------------------------
\par Printf            Print string to console.
\par A0 call $3f
\par in:      a0       Pointer to 0 terminated string.
\par          a1-a3    Arguments.
\par          sp+$10
\par 
\par Prints the specified string to the console (ie. pc screen).
\par String can contain standard C escape sequences and conversion
\par characters, except the floating point types (%e, %f, %g).
\par Variables are passed in a1 to a3. More variables are passed at
\par sp+$10.
\par -------------------------------------------------------------
\par openevent         adds an event structure to the event table.
\par B0 call $08
\par in:      a0       Event class.
\par          a1       Event spec.
\par          a2       Event mode.
\par          a3       Address of function to be executed when
\par                   event occurs.
\par out:     v0       Event descriptor, -1 if failed.
\par 
\par Opens an event, should be called within a critical section.
\par The return value is used to identify the event to the other
\par even functions.
\par A list of event classes, specs and modes is at the end of this
\par section.
\par -------------------------------------------------------------
\par closeevent        releases an event structure from the
\par B0 call $09       event table.
\par in:      a0       Event descriptor.
\par out:     v0       1 on success, 0 if failed.
\par -------------------------------------------------------------
\par enableevent       Turns on event handling for specified event.
\par B0 call $0c
\par in:      a0       Event descriptor.
\par out:     v0       1 on success, 0 if failed.
\par -------------------------------------------------------------
\par disableevent      Turns off event handling for specified event.
\par B0 call $0d
\par in:      a0       Event descriptor.
\par out:     v0       1 on success, 0 if failed.
\par -------------------------------------------------------------
\par open              Opens a file for IO.
\par B0 call $32
\par in:      a0       File name, terminated with 0
\par          a1       Access mode
\par out:     v0       File handle, or -1 if error.
\par 
\par Opens a file on the target device for io. Access mode is set
\par like this:
\par 
\par bit 0    1 = Read
\par     1    1 = Write
\par     9    1 = New file
\par    15    1 = Asynchronous mode?
\par    16-31 Number of memory card blocks for a new file on the
\par          memory card.
\par 
\par The PSX can have a maximum of 16 files open at any time.
\par -------------------------------------------------------------
\par lseek             Move the file pointer.
\par B0 call $33
\par in:      a0       File handle
\par          a1       Movement offset in bytes
\par          a2       0 = from start of file
\par                   1 = from current file pointer
\par                   2 = Bugs. Should be from end of file.
\par 
\par Moves the file pointer the number of bytes in a1, relative to
\par the location specified by a2. Movement from the eof is incorrect.
\par Also, movement beyond the end of the file is not checked.
\par -------------------------------------------------------------
\par read              Read data from an open file.
\par B0 call $34
\par in:      a0       File Handle
\par          a1       Pointer to address to store read data
\par          a2       Number of bytes to read
\par out:     v0       Number of bytes actually read, -1 if failed.
\par 
\par Reads the number of bytes from the specified open file. If length
\par is not specified an error is returned. Read per $0080 bytes from
\par memory card (bu:) and per $0800 from cdrom (cdrom:).
\par -------------------------------------------------------------
\par write             Write data to an open file.
\par B0 call $35
\par in:      a0       File handle
\par          a1       Pointer to adress to read data from.
\par          a2       Number of bytes to write.
\par out:     v0       Number of bytes written.
\par 
\par Writes the number of bytes to the specified open file. Write
\par to the memory card per $0080 bytes. Writing to the cdrom returns 0.
\par -------------------------------------------------------------
\par close             Close an open file.
\par B0 call $36
\par in:      a0       File handle
\par out:     v0       File hande if success, -1 if failed.
\par -------------------------------------------------------------
\par cd                Change the current directory on target device.
\par B0 call $40
\par in:      a0       Pointer to new directory path
\par out:     v0       1 if success, 0 if failed.
\par 
\par Changes the current directory on target system.
\par -------------------------------------------------------------
\par firstfile         Finds the first file to match the name.
\par B0 call $42
\par in:      a0       Pointer to the file name.
\par          a1       Pointer to direntry structure.
\par out:     v0       0 if unsuccessfull, else same as a1.
\par 
\par Searches for the first file to match the name in the string
\par pointed to by a0. Wildcards (?, *) may be used. Start the name
\par with the device you want to address. (ie. pcdrv:) Different
\par drives can be accessed as normally by their drive names (a:, c:)
\par if path is omitted after the device, the current directory will
\par be used.
\par 
\par A direntry structure looks like this:
\par 
\par $00 - $13     db  Filename, terminated with 0.
\par $14           dw  File attribute
\par $18           dw  File size
\par $1c           dw  Pointer to next direntry
\par $20 - $27     db  Reserved by system
\par -------------------------------------------------------------
\par nextfile          Searches for the next file to match the name.
\par B0 call $43
\par in:      a0       Pointer to direntry structure
\par out:     v0       0 if unsuccesful, else same as a0.
\par 
\par Uses the settings of a previous firstfile command.
\par -------------------------------------------------------------
\par rename            Rename a file on target device.
\par B0 call $44
\par in:      a0       Pointer to old file name
\par          a1       Pointer to new file name
\par out:     v0       1 if successful, 0 if failed.
\par -------------------------------------------------------------
\par delete            Delete a file on target device.
\par B0 call $45
\par in:      a0       Pointer to file name
\par out:     v0       1 if successful, 0 if failed.
\par -------------------------------------------------------------
\par 
\par Event Classes
\par 
\par The upper byte of each event type, is a descriptor byte, which
\par identifies the type of event to kernal routines.
\par 
\par Descriptors:
\par $ff     Thread
\par $f0     Hardware
\par $f1     Event
\par $f2     Root counter
\par $f3     User event
\par $f4     BIOS
\par 
\par Hardware events:
\par $f0000001    VBLANK
\par $f0000002    GPU
\par $f0000003    CDROM Decoder
\par $f0000004    DMA controller
\par $f0000005    RTC0
\par $f0000006    RTC1
\par $f0000007    RTC2
\par $f0000008    Controller
\par $f0000009    SPU
\par $f000000a    PIO
\par $f000000b    SIO
\par $f0000010    Exception
\par $f0000011    memory card
\par $f0000012    memory card
\par $f0000013    memory card
\par 
\par Root counter events:
\par $f2000000    counter 0 (pixel clock)
\par $f2000001    counter 1 (horizontal retrace)
\par $f2000002    counter 2 (one-eighth of system clock)
\par $f2000003    counter 3 (vertical retrace)
\par 
\par Bios events:
\par $f4000001    memory card
\par $f4000002    libmath
\par 
\par Event Specs:
\par $0001    counter becomes zero
\par $0002    interrupted
\par $0004    end of i/o
\par $0008    file was closed
\par $0010    command acknowledged
\par $0020    command completed
\par $0040    data ready
\par $0080    data end
\par $0100    time out
\par $0200    unknown command
\par $0400    end of read buffer
\par $0800    end of write buffer
\par $1000    general interrupt
\par $2000    new device
\par $4000    system call instruction
\par $8000    error happned
\par $8001    previous write error happned
\par $0301    domain error in libmath
\par $0302    range error in libmath
\par 
\par Event modes:
\par $1000    Handle on interrupt
\par $2000    Do not handle on interrupt.
\par 
\par --------------------------------------------------------------------------
\par Root Counters
\par --------------------------------------------------------------------------
\par There are 4 root counters.
\par 
\par Counter  Base address      Synced to
\par 0        $1f801100         pixelclock
\par 1        $1f801110         horizontal retrace
\par 2        $1f801120         1/8 system clock
\par 3                          vertical retrace
\par 
\par Each have three registers, one with the current value, one with the counter
\par mode, and one with a target value.
\par 
\par -------------------------------------------------------------
\par $11x0 Count  r
\par bit |31                  16|15                   0|
\par desc|Garbage               |Count                 |
\par      
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \lang1033\langfe1033\loch\af5\dbch\af31505\langfenp1033\insrsid7890070 \hich\af1\dbch\af31505\loch\f5 Count    Current count value, 0-$ffff}{\rtlch\fcs1 \af1 \ltrch\fcs0 
\lang1033\langfe1033\dbch\af31505\langfenp1033\insrsid7890070 
\par }{\rtlch\fcs1 \af5 \ltrch\fcs0 \f5\insrsid7890070 
\par Upper word seems to contain only garbage.
\par -------------------------------------------------------------
\par $11x4 Mode   rw
\par bit |31      10|9  |8  |7 |6  |5 |4  |3  | 2  1| 0|
\par desc|Garbage   |Div|Clc|  |Iq2|  |Iq1|Tar|     |En|
\par 
\par En       0        Counter running
\par          1        Counter stopped (only counter 2)
\par Tar      0        Count to $ffff
\par          1        Count to value in target register
\par Iq1               Set both for IRQ on target reached.
\par Iq2
\par Clc      0        System clock (it seems)
\par          1        Pixel clock (counter 0)
\par                   Horizontal retrace (counter 1)
\par Div      0        System clock (it seems)
\par          1        1/8 * System clock (counter 2)
\par 
\par When Clc and Div of the counters are zero, they all run at the
\par same speed. This speed seems to be about 8 times the normal
\par speed of root counter 2, which is specified as 1/8 the system
\par clock.
\par 
\par Bits 10 to 31 seem to contain only garbage.
\par -------------------------------------------------------------
\par $11x8 Target rw
\par bit |31                  16|15                       0|
\par desc|Garbage?              |Target                    |
\par 
\par Target   Target value, 0-$ffff
\par 
\par Upper word seems to contain only garbage.
\par -------------------------------------------------------------
\par Quick step-by-step:
\par 
\par To set up an interrupt using these counters you can do the following:
\par 1 - Reset the counter. (Mode = 0)
\par 2 - Set its target value, set mode.
\par 3 - Enable corresponding bit in the interrupt mask register ($1f801074)
\par     bit 3 = Counter 3 (Vblank)
\par     bit 4 = Counter 0 (System clock)
\par     bit 5 = Counter 1 (Hor retrace)
\par     bit 6 = Counter 2 (Pixel)
\par 4 - Open an event. (Openevent bios call - $b0, $08)
\par     With following arguments:
\par  a0-Rootcounter event descriptor or'd with the counter number.
\par     ($f2000000 - counter 0, $f2000001 - counter 1,$f2000002 - counter 2,
\par      $f2000003 - counter 3)
\par  a1-Spec = $0002 - interrupt event.
\par  a2-Mode = Interrupt handling ($1000)
\par  a3-Pointer to your routine to be excuted.
\par     The return value in V0 is the event identifier.
\par 
\par 5 - Enable the event, with the corresponding bioscall ($b0,$0c) with
\par     the identifier as argument.
\par 
\par 6 - Make sure interrupts are enabled. (Bit 0 and bit 10 of the COP0 status
\par     register must be set.)
\par 
\par Your handler just has to restore the registers it uses, and it should
\par terminate with a normal jr ra.
\par 
\par To turn off the interrupt, first call disable event ($b0, $0d) and then
\par close it using the Close event call ($b0,$09) both with the event number
\par as argument.
\par 
\par --------------------------------------------------------------------------
\par DMA
\par --------------------------------------------------------------------------
\par 
\par -------------------------------------------------------------
\par DPCR     Dma control register       $1f8010f0
\par |1f 1c|1b 18|17 14|13 10|0f 0c|0b 08|07 04|03 00|
\par |     |Dma6 |Dma5 |Dma4 |Dma3 |Dma2 |Dma1 |Dma0 |
\par 
\par Each register has a 4 bit control block allocated in this
\par register.
\par Bit 3:   1= Dma Enabled
\par     2:   ?
\par     1:   ?
\par     0:   ?
\par 
\par Bit 3 must be set for a channel to operate.
\par -------------------------------------------------------------
\par DICR     Dma interrupt register     $1f8010f4
\par 
\par -------------------------------------------------------------
\par The DMA channel registers are located starting at $1f801080. The
\par base adress for each channel is:
\par $1f801080 DMA channel 0  MDECin
\par $1f801090 DMA channel 1  MDECout
\par $1f8010a0 DMA channel 2  GPU (lists + image data)
\par $1f8010b0 DMA channel 3  CDrom
\par $1f8010c0 DMA channel 4  SPU
\par $1f8010d0 DMA channel 5  PIO
\par $1f8010e0 DMA channel 6  OTC (reverse clear OT)
\par 
\par -------------------------------------------------------------
\par D_MADR           DMA base address.          $1f8010x0
\par bit |1f                              00|
\par desc|madr                              |
\par 
\par madr     pointer to the adress the DMA will start reading
\par          from/writing to
\par -------------------------------------------------------------
\par D_BCR            DMA block control          $1f8010x4
\par bit |1f                   10|0f      00|
\par desc|ba                     |bs        |
\par 
\par ba       Amount of blocks
\par bs       Blocksize (words)
\par 
\par The channel will transfer ba blocks of bs words. Take care
\par not to set the size larger than the buffer of the corresponding
\par unit can hold. (GPU & SPU both have a $10 word buffer). A
\par larger blocksize, means a faster transfer.
\par -------------------------------------------------------------
\par D_CHCR           DMA channel control        $1f8010x8
\par bit |1f-19|18|17-0c|0b|0a|09|08|07 01|00|
\par desc|    0|Tr|    0| 0|Li|Co| 0|    0|Dr|
\par 
\par Tr       0        No DMA transfer busy.
\par          1        Start DMA transfer/DMA transfer busy.
\par Li       1        Transfer linked list. (GPU only)
\par Co       1        Transfer continous stream of data.
\par Dr       0        direction to memory
\par          1        direction from memory
\par -------------------------------------------------------------
\par 
\par --------------------------------------------------------------------------
\par doomed@c64.org <- corrections/additions     latest update -> psx.rules.org
\par --------------------------------------------------------------------------
\par 16/may/1999       Initial version.
\par 19/may/1999       Added Breakpoint info. <Herozero>
\par  3/jun/1999       Root counters, some stuff on events and DMA added.
\par 
\par (thanx to ppl in <>)
\par --------------------------------------------------------------------------
\par thanx & hello to the usual.
\par 
\par }{\rtlch\fcs1 \af5 \ltrch\fcs0 \f5\insrsid7890070 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100aa5225dfc60600008b1a0000160000007468656d652f7468656d652f
7468656d65312e786d6cec595d8bdb46147d2ff43f08bd3bfe92fcb1c41b6cd9ceb6d94d42eca4e4716c8fadc98e344633de8d0981923c160aa569e943037deb
43691b48a02fe9afd936a54d217fa17746b63c638fbb9b2585a5640d8b343af7ce997bafce1d4997afdc8fa87384134e58dc708b970aae83e3211b9178d2706f
f7bbb99aeb7081e211a22cc60d778eb97b65f7c30f2ea31d11e2083b601ff31dd4704321a63bf93c1fc230e297d814c7706dcc920809384d26f951828ec16f44
f3a542a1928f10895d274611b8bd311e932176fad2a5bbbb74dea1701a0b2e078634e949d7d8b050d8d1615122f89c0734718e106db830cf881df7f17de13a14
7101171a6e41fdb9f9ddcb79b4b330a2628bad66d7557f0bbb85c1e8b0a4e64c26836c52cff3bd4a33f3af00546ce23ad54ea553c9fc29001a0e61a52917dda7
dfaab7dafe02ab81d2438bef76b55d2e1a78cd7f798373d3973f03af40a97f6f03dfed06104503af4029dedfc07b5eb51478065e81527c65035f2d34db5ed5c0
2b5048497cb8812ef89572b05c6d061933ba6785d77daf5b2d2d9caf50500d5975c929c62c16db6a2d42f758d2058004522448ec88f9148fd110aa3840940c12
e2ec93490885374531e3305c2815ba8532fc973f4f1da988a01d8c346bc90b98f08d21c9c7e1c3844c45c3fd18bcba1ae4cdcb1fdfbc7cee9c3c7a71f2e89793
c78f4f1efd9c3a32acf6503cd1ad5e7fffc5df4f3f75fe7afeddeb275fd9f15cc7fffed367bffdfaa51d082b5d85e0d5d7cffe78f1ecd5379ffff9c3130bbc99
a0810eef930873e73a3e766eb10816a6426032c783e4ed2cfa2122ba45339e701423398bc57f478406fafa1c5164c1b5b019c13b09488c0d787576cf20dc0b93
9920168fd7c2c8001e30465b2cb146e19a9c4b0b737f164fec9327331d770ba123dbdc018a8dfc766653d05662731984d8a07993a258a0098eb170e4357688b1
6575770931e27a408609e36c2c9cbbc46921620d499f0c8c6a5a19ed9108f232b711847c1bb139b8e3b418b5adba8d8f4c24dc15885ac8f73135c27815cd048a
6c2efb28a27ac0f791086d247bf364a8e33a5c40a6279832a733c29cdb6c6e24b05e2de9d7405eec693fa0f3c84426821cda7cee23c674649b1d06218aa6366c
8fc4a18efd881f428922e7261336f80133ef10790e7940f1d674df21d848f7e96a701b9455a7b42a107965965872791533a37e7b733a4658490d08bfa1e71189
4f15f73559f7ff5b5907217df5ed53cbaa2eaaa0371362bda3f6d6647c1b6e5dbc03968cc8c5d7ee369ac53731dc2e9b0decbd74bf976ef77f2fdddbeee7772f
d82b8d06f9965bc574abae36eed1d67dfb9850da13738af7b9daba73e84ca32e0c4a3bf5cc8ab3e7b8690887f24e86090cdc2441cac64998f88488b017a229ec
ef8bae7432e10bd713ee4c19876dbf1ab6fa96783a8b0ed8287d5c2d16e5a3692a1e1c89d578c1cfc6e15143a4e84a75f50896b9576c27ea51794940dabe0d09
6d329344d942a2ba1c9441520fe610340b09b5b277c2a26e615193ee97a9da6001d4b2acc0d6c9810d57c3f53d30012378a242148f649ed2542fb3ab92f92e33
bd2d984605c03e625901ab4cd725d7adcb93ab4b4bed0c99364868e566925091513d8c87688417d52947cf42e36d735d5fa5d4a02743a1e683d25ad1a8d6fe8d
c579730d76ebda40635d2968ec1c37dc4ad9879219a269c31dc3633f1c4653a81d2eb7bc884ee0ddd95024e90d7f1e6599265cb4110fd3802bd149d520220227
0e2551c395cbcfd24063a5218a5bb104827061c9d541562e1a3948ba99643c1ee3a1d0d3ae8dc848a7a7a0f0a95658af2af3f383a5259b41ba7be1e8d819d059
720b4189f9d5a20ce0887078fb534ca33922f03a3313b255fdad35a685eceaef13550da5e3884e43b4e828ba98a77025e5191d7596c5403b5bac1902aa8564d1
080713d960f5a01add34eb1a2987ad5df7742319394d34573dd35015d935ed2a66ccb06c036bb13c5f93d7582d430c9aa677f854bad725b7bed4bab57d42d625
20e059fc2c5df70c0d41a3b69acca026196fcab0d4ecc5a8d93b960b3c85da599a84a6fa95a5dbb5b8653dc23a1d0c9eabf383dd7ad5c2d078b9af549156df3d
f44f136c700fc4a30d2f81675470954af8f09020d810f5d49e24950db845ee8bc5ad0147ce2c210df741c16f7a41c90f72859adfc97965af90abf9cd72aee9fb
e562c72f16daadd243682c228c8a7efacda50bafa2e87cf1e5458d6f7c7d89966fdb2e0d599467eaeb4a5e11575f5f8aa5ed5f5f1c02a2f3a052ead6cbf55625
572f37bb39afddaae5ea41a5956b57826abbdb0efc5abdfbd0758e14d86b9603afd2a9e52ac520c8799582a45fabe7aa5ea9d4f4aacd5ac76b3e5c6c6360e5a9
7c2c6201e155bc76ff010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f
7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be
9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980
ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5b
babac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000005b436f6e74656e
745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f
2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000190200007468656d652f7468656d652f74
68656d654d616e616765722e786d6c504b01022d0014000600080000002100aa5225dfc60600008b1a00001600000000000000000000000000d6020000746865
6d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b0100002700000000000000000000000000d00900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000cb0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax371\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdqformat1 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdlocked0 List;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;
\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;
\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;
\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;
\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;
\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;
\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;
\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;
\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;
\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdpriority62 \lsdlocked0 Light Grid Accent 5;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000d0d4
02bb20d4ce01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}